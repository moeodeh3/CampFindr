"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ontario-parks/resource-details/getResourceDetails";
exports.ids = ["pages/api/ontario-parks/resource-details/getResourceDetails"];
exports.modules = {

/***/ "(api)/./src/pages/api/ontario-parks/resource-details/getResourceDetails.ts":
/*!****************************************************************************!*\
  !*** ./src/pages/api/ontario-parks/resource-details/getResourceDetails.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler),\n/* harmony export */   \"getResourceLocationDetails\": () => (/* binding */ getResourceLocationDetails)\n/* harmony export */ });\n// in-memory cache\nlet resourceCache = null;\nlet resourceCacheTimestamp = null;\n// cache time of 7 days\nconst CACHE_DURATION = 1000 * 60 * 60 * 168;\nasync function fetchResourceLocation() {\n    const now = Date.now();\n    // check if the cache is still valid\n    if (resourceCache && resourceCacheTimestamp && now - resourceCacheTimestamp < CACHE_DURATION) {\n        return resourceCache;\n    }\n    // if cache is not valid, fetch new data\n    try {\n        const url = `https://reservations.ontarioparks.ca/api/resourceLocation`;\n        const resp = await fetch(url);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch data: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch data: ${resp.status}`);\n        }\n        const data = await resp.json();\n        // we create a new map to store only the fields we care about\n        const resourceMap = new Map();\n        data.forEach((entry)=>{\n            const localizedEntry = entry.localizedValues.find((val)=>val.cultureName === \"en-CA\");\n            resourceMap.set(entry.resourceLocationId, {\n                fullName: localizedEntry?.fullName,\n                description: localizedEntry?.description,\n                streetAddress: localizedEntry?.streetAddress,\n                website: localizedEntry?.website,\n                city: localizedEntry?.city,\n                region: entry.region,\n                regionCode: entry.regionCode,\n                country: entry.country,\n                phoneNumber: entry.phoneNumber\n            });\n        });\n        // update the cache\n        resourceCache = resourceMap;\n        resourceCacheTimestamp = now;\n        return resourceMap;\n    } catch (error) {\n        console.error(\"Error fetching resource location data:\", error);\n        throw new Error(\"Failed to fetch resource location data\");\n    }\n}\nasync function getResourceLocationDetails(resourceLocationId) {\n    try {\n        const resourceMap = await fetchResourceLocation();\n        return resourceMap.get(resourceLocationId) || null;\n    } catch (error) {\n        console.error(\"Error fetching resource location details:\", error);\n        return null;\n    }\n}\nasync function handler(req, res) {\n    const { resourceLocationId  } = req.query;\n    // validate and parse mapId\n    if (!resourceLocationId || Array.isArray(resourceLocationId)) {\n        return res.status(400).json({\n            error: \"Invalid or missing mapId parameter\"\n        });\n    }\n    const resourceLocationIdNumber = Number(resourceLocationId);\n    try {\n        console.log(\"the resource location id is: \", resourceLocationId);\n        const data = await getResourceLocationDetails(resourceLocationIdNumber);\n        if (!data) {\n            return res.status(404).json({\n                error: \"Resource location not found\"\n            });\n        }\n        return res.status(200).json(data);\n    } catch (error) {\n        console.error(\"Error in handler:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch resource location data\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/resource-details/getResourceDetails.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/ontario-parks/resource-details/getResourceDetails.ts"));
module.exports = __webpack_exports__;

})();