"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ontario-parks/getAvailability";
exports.ids = ["pages/api/ontario-parks/getAvailability"];
exports.modules = {

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/getAvailability.ts":
/*!********************************************************!*\
  !*** ./src/pages/api/ontario-parks/getAvailability.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(api)/./src/pages/api/ontario-parks/utils.ts\");\n/* harmony import */ var _getMapLegend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMapLegend */ \"(api)/./src/pages/api/ontario-parks/getMapLegend.ts\");\n\n\n\n// in-memory cache\nlet cacheData = {};\nlet cacheTimestamp = {};\n// we have a cache time of 2 minute\nconst CACHE_DURATION = 1000 * 60 * 2;\n// we generate a seed everytime or else the request would fail\nfunction generateSeed() {\n    return new Date().toISOString();\n}\n// we generate a unique cache key based on query parameters\nfunction generateCacheKey(url, queryParams) {\n    const queryString = Object.keys(queryParams).map((key)=>`${key}=${queryParams[key]}`).join(\"&\");\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(`${url}?${queryString}`).digest(\"hex\");\n}\nasync function FetchAvailability(queryParams) {\n    const url = `https://reservations.ontarioparks.ca/api/availability/map`;\n    const cacheKey = generateCacheKey(url, queryParams);\n    // we check if the cache is still valid\n    const now = Date.now();\n    if (cacheData[cacheKey] && cacheTimestamp[cacheKey] && now - cacheTimestamp[cacheKey] < CACHE_DURATION) {\n        return cacheData[cacheKey];\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const queryString = new URLSearchParams(queryParams).toString();\n        const fullUrl = `${url}?${queryString}`;\n        const resp = await fetch(fullUrl);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch data, status: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch data: ${resp.status}`);\n        }\n        const data = await resp.json();\n        // update the cache\n        cacheData[cacheKey] = data;\n        cacheTimestamp[cacheKey] = now;\n        return data;\n    } catch (error) {\n        console.error(\"error fetching availability data:\", error);\n        throw new Error(\"Failed to fetch availability data\");\n    }\n}\nasync function FetchAllParksAvailability(queryParams) {\n    const allParksData = await FetchAvailability(queryParams);\n    // ensure that mapLinkAvailabilities exists\n    const childMapIds = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getChildMapIdsFromData)(allParksData);\n    const grandchildData = await Promise.all(childMapIds.map(async (childMapId)=>{\n        const childAvailability = await FetchAvailability({\n            ...queryParams,\n            mapId: childMapId\n        });\n        return childAvailability;\n    }));\n    const grandchildMapIds = grandchildData.flatMap((data)=>(0,_utils__WEBPACK_IMPORTED_MODULE_1__.getChildMapIdsFromData)(data)).filter((id, index, self)=>self.indexOf(id) === index);\n    const grandchildAvailabilityData = await Promise.all(grandchildMapIds.map(async (grandchildMapId)=>{\n        const legendDetails = await (0,_getMapLegend__WEBPACK_IMPORTED_MODULE_2__.getMapLegendDetails)(grandchildMapId);\n        return {\n            mapId: grandchildMapId,\n            legendDetails\n        };\n    }));\n    return grandchildAvailabilityData;\n}\nasync function handler(req, res) {\n    const { mapId , bookingCategoryId , equipmentCategoryId , subEquipmentCategoryId , cartUid , cartTransactionUid , bookingUid , startDate , endDate , partySize  } = req.query;\n    const queryParams = {\n        mapId: mapId ? Number(mapId) : -2147483464,\n        bookingCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(bookingCategoryId, \"0\"),\n        equipmentCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(equipmentCategoryId, \"-32768\"),\n        subEquipmentCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(subEquipmentCategoryId, \"-32768\"),\n        cartUid: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(cartUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        cartTransactionUid: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(cartTransactionUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        bookingUid: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(bookingUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        startDate: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(startDate, new Date().toISOString().split(\"T\")[0]),\n        endDate: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(endDate, new Date(new Date().setDate(new Date().getDate() + 1)).toISOString().split(\"T\")[0]),\n        getDailyAvailability: \"false\",\n        isReserving: \"true\",\n        filterData: `[]`,\n        boatLength: \"null\",\n        boatDraft: \"null\",\n        boatWidth: \"null\",\n        partySize: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getQueryParamAsString)(partySize, \"2\"),\n        numEquipment: \"null\",\n        seed: generateSeed()\n    };\n    if (!mapId) {\n        // initial search for all parks\n        const data = await FetchAllParksAvailability(queryParams);\n        return res.status(200).json(data);\n    } else {\n        // search one level lower\n        const data1 = await FetchAvailability(queryParams);\n        const legendDetails = await (0,_getMapLegend__WEBPACK_IMPORTED_MODULE_2__.getMapLegendDetails)(Number(mapId));\n        return res.status(200).json({\n            mapId,\n            legendDetails\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/getAvailability.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/getImageUrl.ts":
/*!****************************************************!*\
  !*** ./src/pages/api/ontario-parks/getImageUrl.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fetchImageUrl\": () => (/* binding */ fetchImageUrl)\n/* harmony export */ });\n// in-memory cache\nlet imageCache = null;\nlet imageCacheTimestamp = null;\n// we have a cache time of 7 days\nconst CACHE_DURATION = 1000 * 60 * 60 * 168;\nasync function fetchImageUrl(mapId) {\n    const now = Date.now();\n    if (!imageCache) {\n        imageCache = new Map();\n    }\n    // we check if the cache is still valid\n    if (imageCache.has(mapId) && imageCacheTimestamp && now - imageCacheTimestamp < CACHE_DURATION) {\n        return imageCache.get(mapId) || null;\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const url = `https://reservations.ontarioparks.ca/api/photo/resourcelocation?resourceLocationId=${mapId}`;\n        const resp = await fetch(url);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch image URL: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch image URL: ${resp.status}`);\n        }\n        const imageUrl = await resp.text();\n        // update the cache\n        imageCache.set(mapId, imageUrl);\n        imageCacheTimestamp = now;\n        return imageUrl;\n    } catch (error) {\n        console.error(\"Error fetching image URL:\", error);\n        throw new Error(\"Failed to fetch image URL\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvZ2V0SW1hZ2VVcmwudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtCQUFrQjtBQUNsQixJQUFJQSxhQUF5QyxJQUFJO0FBQ2pELElBQUlDLHNCQUFxQyxJQUFJO0FBRTdDLGlDQUFpQztBQUNqQyxNQUFNQyxpQkFBaUIsT0FBTyxLQUFLLEtBQUs7QUFFakMsZUFBZUMsY0FBY0MsS0FBYSxFQUEwQjtJQUN6RSxNQUFNQyxNQUFNQyxLQUFLRCxHQUFHO0lBRXBCLElBQUksQ0FBQ0wsWUFBWTtRQUNmQSxhQUFhLElBQUlPO0lBQ25CLENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsSUFDRVAsV0FBV1EsR0FBRyxDQUFDSixVQUNmSCx1QkFDQUksTUFBTUosc0JBQXNCQyxnQkFDNUI7UUFDQSxPQUFPRixXQUFXUyxHQUFHLENBQUNMLFVBQVUsSUFBSTtJQUN0QyxDQUFDO0lBRUQsMkNBQTJDO0lBQzNDLElBQUk7UUFDRixNQUFNTSxNQUFNLENBQUMsbUZBQW1GLEVBQUVOLE1BQU0sQ0FBQztRQUN6RyxNQUFNTyxPQUFPLE1BQU1DLE1BQU1GO1FBRXpCLElBQUksQ0FBQ0MsS0FBS0UsRUFBRSxFQUFFO1lBQ1osTUFBTUMsZUFBZSxNQUFNSCxLQUFLSSxJQUFJO1lBQ3BDQyxRQUFRQyxLQUFLLENBQ1gsQ0FBQywyQkFBMkIsRUFBRU4sS0FBS08sTUFBTSxDQUFDLFdBQVcsRUFBRUosYUFBYSxDQUFDO1lBRXZFLE1BQU0sSUFBSUssTUFBTSxDQUFDLDJCQUEyQixFQUFFUixLQUFLTyxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQy9ELENBQUM7UUFFRCxNQUFNRSxXQUFXLE1BQU1ULEtBQUtJLElBQUk7UUFFaEMsbUJBQW1CO1FBQ25CZixXQUFXcUIsR0FBRyxDQUFDakIsT0FBT2dCO1FBQ3RCbkIsc0JBQXNCSTtRQUV0QixPQUFPZTtJQUNULEVBQUUsT0FBT0gsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsNkJBQTZCQTtRQUMzQyxNQUFNLElBQUlFLE1BQU0sNkJBQTZCO0lBQy9DO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbXBmaW5kci8uL3NyYy9wYWdlcy9hcGkvb250YXJpby1wYXJrcy9nZXRJbWFnZVVybC50cz82ZTYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuXG4vLyBpbi1tZW1vcnkgY2FjaGVcbmxldCBpbWFnZUNhY2hlOiBNYXA8bnVtYmVyLCBzdHJpbmc+IHwgbnVsbCA9IG51bGw7XG5sZXQgaW1hZ2VDYWNoZVRpbWVzdGFtcDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbi8vIHdlIGhhdmUgYSBjYWNoZSB0aW1lIG9mIDcgZGF5c1xuY29uc3QgQ0FDSEVfRFVSQVRJT04gPSAxMDAwICogNjAgKiA2MCAqIDE2ODtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoSW1hZ2VVcmwobWFwSWQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gIGlmICghaW1hZ2VDYWNoZSkge1xuICAgIGltYWdlQ2FjaGUgPSBuZXcgTWFwPG51bWJlciwgc3RyaW5nPigpO1xuICB9XG5cbiAgLy8gd2UgY2hlY2sgaWYgdGhlIGNhY2hlIGlzIHN0aWxsIHZhbGlkXG4gIGlmIChcbiAgICBpbWFnZUNhY2hlLmhhcyhtYXBJZCkgJiZcbiAgICBpbWFnZUNhY2hlVGltZXN0YW1wICYmXG4gICAgbm93IC0gaW1hZ2VDYWNoZVRpbWVzdGFtcCA8IENBQ0hFX0RVUkFUSU9OXG4gICkge1xuICAgIHJldHVybiBpbWFnZUNhY2hlLmdldChtYXBJZCkgfHwgbnVsbDtcbiAgfVxuXG4gIC8vIGlmIGNhY2hlIGlzIG5vdCB2YWxpZCwgd2UgZmV0Y2ggbmV3IGRhdGFcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9yZXNlcnZhdGlvbnMub250YXJpb3BhcmtzLmNhL2FwaS9waG90by9yZXNvdXJjZWxvY2F0aW9uP3Jlc291cmNlTG9jYXRpb25JZD0ke21hcElkfWA7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgICBpZiAoIXJlc3Aub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGF3YWl0IHJlc3AudGV4dCgpO1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBmZXRjaCBpbWFnZSBVUkw6ICR7cmVzcC5zdGF0dXN9LCBkZXRhaWxzOiAke2Vycm9yRGV0YWlsc31gXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggaW1hZ2UgVVJMOiAke3Jlc3Auc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGltYWdlVXJsID0gYXdhaXQgcmVzcC50ZXh0KCk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGNhY2hlXG4gICAgaW1hZ2VDYWNoZS5zZXQobWFwSWQsIGltYWdlVXJsKTtcbiAgICBpbWFnZUNhY2hlVGltZXN0YW1wID0gbm93O1xuXG4gICAgcmV0dXJuIGltYWdlVXJsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBpbWFnZSBVUkw6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggaW1hZ2UgVVJMXCIpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiaW1hZ2VDYWNoZSIsImltYWdlQ2FjaGVUaW1lc3RhbXAiLCJDQUNIRV9EVVJBVElPTiIsImZldGNoSW1hZ2VVcmwiLCJtYXBJZCIsIm5vdyIsIkRhdGUiLCJNYXAiLCJoYXMiLCJnZXQiLCJ1cmwiLCJyZXNwIiwiZmV0Y2giLCJvayIsImVycm9yRGV0YWlscyIsInRleHQiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXMiLCJFcnJvciIsImltYWdlVXJsIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/getImageUrl.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/getMapLegend.ts":
/*!*****************************************************!*\
  !*** ./src/pages/api/ontario-parks/getMapLegend.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getMapLegendDetails\": () => (/* binding */ getMapLegendDetails)\n/* harmony export */ });\n/* harmony import */ var _getImageUrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getImageUrl */ \"(api)/./src/pages/api/ontario-parks/getImageUrl.ts\");\n\n// in-memory cache\nlet legendCache = null;\nlet cacheTimestamp = null;\n// we have a cache time of 7 days\nconst CACHE_DURATION = 1000 * 60 * 60 * 168;\nasync function fetchMapLegend() {\n    const now = Date.now();\n    // we check if the cache is still valid\n    if (legendCache && cacheTimestamp && now - cacheTimestamp < CACHE_DURATION) {\n        return legendCache;\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const url = `https://reservations.ontarioparks.ca/api/maps`;\n        const resp = await fetch(url);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch data: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch data: ${resp.status}`);\n        }\n        const data = await resp.json();\n        // make the response a map with key being the mapId and values being things we use\n        const legendMap = new Map();\n        data.forEach((entry)=>{\n            const localizedEntry = entry.localizedValues.find((val)=>val.cultureName === \"en-CA\");\n            legendMap.set(entry.mapId, {\n                title: localizedEntry?.title,\n                description: localizedEntry?.description,\n                resourceLocationId: entry.resourceLocationId\n            });\n        });\n        // update the cache\n        legendCache = legendMap;\n        cacheTimestamp = now;\n        return legendMap;\n    } catch (error) {\n        console.error(\"Error fetching map legend data:\", error);\n        throw new Error(\"Failed to fetch map legend data\");\n    }\n}\nasync function getMapLegendDetails(mapId) {\n    try {\n        const legendMap = await fetchMapLegend();\n        const legendDetails = legendMap.get(mapId);\n        if (legendDetails) {\n            const imageUrl = await (0,_getImageUrl__WEBPACK_IMPORTED_MODULE_0__.fetchImageUrl)(legendDetails.resourceLocationId);\n            return {\n                title: legendDetails.title,\n                description: legendDetails.description,\n                imageUrl: imageUrl\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error fetching map legend details:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvZ2V0TWFwTGVnZW5kLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTzhDO0FBRTlDLGtCQUFrQjtBQUNsQixJQUFJQyxjQUFrRCxJQUFJO0FBQzFELElBQUlDLGlCQUFnQyxJQUFJO0FBRXhDLGlDQUFpQztBQUNqQyxNQUFNQyxpQkFBaUIsT0FBTyxLQUFLLEtBQUs7QUFFeEMsZUFBZUMsaUJBQXVEO0lBQ3BFLE1BQU1DLE1BQU1DLEtBQUtELEdBQUc7SUFFcEIsdUNBQXVDO0lBQ3ZDLElBQUlKLGVBQWVDLGtCQUFrQkcsTUFBTUgsaUJBQWlCQyxnQkFBZ0I7UUFDMUUsT0FBT0Y7SUFDVCxDQUFDO0lBRUQsMkNBQTJDO0lBQzNDLElBQUk7UUFDRixNQUFNTSxNQUFNLENBQUMsNkNBQTZDLENBQUM7UUFDM0QsTUFBTUMsT0FBTyxNQUFNQyxNQUFNRjtRQUV6QixJQUFJLENBQUNDLEtBQUtFLEVBQUUsRUFBRTtZQUNaLE1BQU1DLGVBQWUsTUFBTUgsS0FBS0ksSUFBSTtZQUNwQ0MsUUFBUUMsS0FBSyxDQUNYLENBQUMsc0JBQXNCLEVBQUVOLEtBQUtPLE1BQU0sQ0FBQyxXQUFXLEVBQUVKLGFBQWEsQ0FBQztZQUVsRSxNQUFNLElBQUlLLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRVIsS0FBS08sTUFBTSxDQUFDLENBQUMsRUFBRTtRQUMxRCxDQUFDO1FBRUQsTUFBTUUsT0FBMEIsTUFBTVQsS0FBS1UsSUFBSTtRQUUvQyxrRkFBa0Y7UUFDbEYsTUFBTUMsWUFBWSxJQUFJQztRQUN0QkgsS0FBS0ksT0FBTyxDQUFDLENBQUNDLFFBQVU7WUFDdEIsTUFBTUMsaUJBQWlCRCxNQUFNRSxlQUFlLENBQUNDLElBQUksQ0FDL0MsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxLQUFLO1lBRy9CUixVQUFVUyxHQUFHLENBQUNOLE1BQU1PLEtBQUssRUFBRTtnQkFDekJDLE9BQU9QLGdCQUFnQk87Z0JBQ3ZCQyxhQUFhUixnQkFBZ0JRO2dCQUM3QkMsb0JBQW9CVixNQUFNVSxrQkFBa0I7WUFDOUM7UUFDRjtRQUVBLG1CQUFtQjtRQUNuQi9CLGNBQWNrQjtRQUNkakIsaUJBQWlCRztRQUVqQixPQUFPYztJQUNULEVBQUUsT0FBT0wsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsbUNBQW1DQTtRQUNqRCxNQUFNLElBQUlFLE1BQU0sbUNBQW1DO0lBQ3JEO0FBQ0Y7QUFFTyxlQUFlaUIsb0JBQ3BCSixLQUFhLEVBQ2tCO0lBQy9CLElBQUk7UUFDRixNQUFNVixZQUFZLE1BQU1mO1FBQ3hCLE1BQU04QixnQkFBZ0JmLFVBQVVnQixHQUFHLENBQUNOO1FBRXBDLElBQUlLLGVBQWU7WUFDakIsTUFBTUUsV0FBVyxNQUFNcEMsMkRBQWFBLENBQUNrQyxjQUFjRixrQkFBa0I7WUFFckUsT0FBTztnQkFDTEYsT0FBT0ksY0FBY0osS0FBSztnQkFDMUJDLGFBQWFHLGNBQWNILFdBQVc7Z0JBQ3RDSyxVQUFVQTtZQUNaO1FBQ0YsQ0FBQztRQUVELE9BQU8sSUFBSTtJQUNiLEVBQUUsT0FBT3RCLE9BQU87UUFDZEQsUUFBUUMsS0FBSyxDQUFDLHNDQUFzQ0E7UUFDcEQsT0FBTyxJQUFJO0lBQ2I7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FtcGZpbmRyLy4vc3JjL3BhZ2VzL2FwaS9vbnRhcmlvLXBhcmtzL2dldE1hcExlZ2VuZC50cz8wM2FhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IHsgTWFwTGVnZW5kRW50cnkgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHtcbiAgQXZhaWxhYmlsaXR5UmVzcG9uc2UsXG4gIExlZ2VuZERldGFpbHMsXG4gIE1hcExlZ2VuZFJlc3BvbnNlLFxufSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvYXBpL29udGFyaW8tcGFya3MvdHlwZXNcIjtcbmltcG9ydCB7IGZldGNoSW1hZ2VVcmwgfSBmcm9tIFwiLi9nZXRJbWFnZVVybFwiO1xuXG4vLyBpbi1tZW1vcnkgY2FjaGVcbmxldCBsZWdlbmRDYWNoZTogTWFwPG51bWJlciwgTWFwTGVnZW5kRW50cnk+IHwgbnVsbCA9IG51bGw7XG5sZXQgY2FjaGVUaW1lc3RhbXA6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4vLyB3ZSBoYXZlIGEgY2FjaGUgdGltZSBvZiA3IGRheXNcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gMTAwMCAqIDYwICogNjAgKiAxNjg7XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoTWFwTGVnZW5kKCk6IFByb21pc2U8TWFwPG51bWJlciwgTWFwTGVnZW5kRW50cnk+PiB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgLy8gd2UgY2hlY2sgaWYgdGhlIGNhY2hlIGlzIHN0aWxsIHZhbGlkXG4gIGlmIChsZWdlbmRDYWNoZSAmJiBjYWNoZVRpbWVzdGFtcCAmJiBub3cgLSBjYWNoZVRpbWVzdGFtcCA8IENBQ0hFX0RVUkFUSU9OKSB7XG4gICAgcmV0dXJuIGxlZ2VuZENhY2hlO1xuICB9XG5cbiAgLy8gaWYgY2FjaGUgaXMgbm90IHZhbGlkLCB3ZSBmZXRjaCBuZXcgZGF0YVxuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IGBodHRwczovL3Jlc2VydmF0aW9ucy5vbnRhcmlvcGFya3MuY2EvYXBpL21hcHNgO1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaCh1cmwpO1xuXG4gICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRldGFpbHMgPSBhd2FpdCByZXNwLnRleHQoKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZmV0Y2ggZGF0YTogJHtyZXNwLnN0YXR1c30sIGRldGFpbHM6ICR7ZXJyb3JEZXRhaWxzfWBcbiAgICAgICk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBkYXRhOiAke3Jlc3Auc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGE6IE1hcExlZ2VuZFJlc3BvbnNlID0gYXdhaXQgcmVzcC5qc29uKCk7XG5cbiAgICAvLyBtYWtlIHRoZSByZXNwb25zZSBhIG1hcCB3aXRoIGtleSBiZWluZyB0aGUgbWFwSWQgYW5kIHZhbHVlcyBiZWluZyB0aGluZ3Mgd2UgdXNlXG4gICAgY29uc3QgbGVnZW5kTWFwID0gbmV3IE1hcDxudW1iZXIsIE1hcExlZ2VuZEVudHJ5PigpO1xuICAgIGRhdGEuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IGxvY2FsaXplZEVudHJ5ID0gZW50cnkubG9jYWxpemVkVmFsdWVzLmZpbmQoXG4gICAgICAgICh2YWwpID0+IHZhbC5jdWx0dXJlTmFtZSA9PT0gXCJlbi1DQVwiXG4gICAgICApO1xuXG4gICAgICBsZWdlbmRNYXAuc2V0KGVudHJ5Lm1hcElkLCB7XG4gICAgICAgIHRpdGxlOiBsb2NhbGl6ZWRFbnRyeT8udGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBsb2NhbGl6ZWRFbnRyeT8uZGVzY3JpcHRpb24sXG4gICAgICAgIHJlc291cmNlTG9jYXRpb25JZDogZW50cnkucmVzb3VyY2VMb2NhdGlvbklkLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGNhY2hlXG4gICAgbGVnZW5kQ2FjaGUgPSBsZWdlbmRNYXA7XG4gICAgY2FjaGVUaW1lc3RhbXAgPSBub3c7XG5cbiAgICByZXR1cm4gbGVnZW5kTWFwO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBtYXAgbGVnZW5kIGRhdGE6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggbWFwIGxlZ2VuZCBkYXRhXCIpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYXBMZWdlbmREZXRhaWxzKFxuICBtYXBJZDogbnVtYmVyXG4pOiBQcm9taXNlPExlZ2VuZERldGFpbHMgfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgbGVnZW5kTWFwID0gYXdhaXQgZmV0Y2hNYXBMZWdlbmQoKTtcbiAgICBjb25zdCBsZWdlbmREZXRhaWxzID0gbGVnZW5kTWFwLmdldChtYXBJZCk7XG5cbiAgICBpZiAobGVnZW5kRGV0YWlscykge1xuICAgICAgY29uc3QgaW1hZ2VVcmwgPSBhd2FpdCBmZXRjaEltYWdlVXJsKGxlZ2VuZERldGFpbHMucmVzb3VyY2VMb2NhdGlvbklkKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGxlZ2VuZERldGFpbHMudGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBsZWdlbmREZXRhaWxzLmRlc2NyaXB0aW9uLFxuICAgICAgICBpbWFnZVVybDogaW1hZ2VVcmwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBtYXAgbGVnZW5kIGRldGFpbHM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZldGNoSW1hZ2VVcmwiLCJsZWdlbmRDYWNoZSIsImNhY2hlVGltZXN0YW1wIiwiQ0FDSEVfRFVSQVRJT04iLCJmZXRjaE1hcExlZ2VuZCIsIm5vdyIsIkRhdGUiLCJ1cmwiLCJyZXNwIiwiZmV0Y2giLCJvayIsImVycm9yRGV0YWlscyIsInRleHQiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXMiLCJFcnJvciIsImRhdGEiLCJqc29uIiwibGVnZW5kTWFwIiwiTWFwIiwiZm9yRWFjaCIsImVudHJ5IiwibG9jYWxpemVkRW50cnkiLCJsb2NhbGl6ZWRWYWx1ZXMiLCJmaW5kIiwidmFsIiwiY3VsdHVyZU5hbWUiLCJzZXQiLCJtYXBJZCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJyZXNvdXJjZUxvY2F0aW9uSWQiLCJnZXRNYXBMZWdlbmREZXRhaWxzIiwibGVnZW5kRGV0YWlscyIsImdldCIsImltYWdlVXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/getMapLegend.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/utils.ts":
/*!**********************************************!*\
  !*** ./src/pages/api/ontario-parks/utils.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChildMapIdsFromData\": () => (/* binding */ getChildMapIdsFromData),\n/* harmony export */   \"getQueryParamAsString\": () => (/* binding */ getQueryParamAsString)\n/* harmony export */ });\nconst getQueryParamAsString = (param, defaultValue)=>Array.isArray(param) ? param[0] : param || defaultValue;\nconst getChildMapIdsFromData = (data)=>{\n    return data.mapLinkAvailabilities ? Object.keys(data.mapLinkAvailabilities).filter((id)=>data.mapLinkAvailabilities[id].every((val)=>val === 0)).map(Number) : [];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvdXRpbHMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFpQk8sTUFBTUEsd0JBQXdCLENBQ25DQyxPQUNBQyxlQUNZQyxNQUFNQyxPQUFPLENBQUNILFNBQVNBLEtBQUssQ0FBQyxFQUFFLEdBQUdBLFNBQVNDLFlBQVksQ0FBRTtBQUVoRSxNQUFNRyx5QkFBeUIsQ0FDcENDLE9BQ2E7SUFDYixPQUFPQSxLQUFLQyxxQkFBcUIsR0FDN0JDLE9BQU9DLElBQUksQ0FBQ0gsS0FBS0MscUJBQXFCLEVBQ25DRyxNQUFNLENBQUMsQ0FBQ0MsS0FDUEwsS0FBS0MscUJBQXFCLENBQUNJLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLE1BQWdCQSxRQUFRLElBRS9EQyxHQUFHLENBQUNDLFVBQ1AsRUFBRTtBQUNSLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW1wZmluZHIvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvdXRpbHMudHM/OTg4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE9udGFyaW9BdmFpbGFiaWxpdHlSZXNwb25zZSB7XG4gIG1hcElkOiBudW1iZXI7XG4gIG1hcEF2YWlsYWJpbGl0aWVzOiBudW1iZXJbXTtcbiAgcmVzb3VyY2VBdmFpbGFiaWxpdGllczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgbWFwTGlua0F2YWlsYWJpbGl0aWVzOiBNYXBMaW5rQXZhaWxhYmlsaXRpZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwTGlua0F2YWlsYWJpbGl0aWVzIHtcbiAgW21hcElkOiBzdHJpbmddOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYXBMZWdlbmRFbnRyeSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHJlc291cmNlTG9jYXRpb25JZDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0UXVlcnlQYXJhbUFzU3RyaW5nID0gKFxuICBwYXJhbTogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQsXG4gIGRlZmF1bHRWYWx1ZTogc3RyaW5nXG4pOiBzdHJpbmcgPT4gKEFycmF5LmlzQXJyYXkocGFyYW0pID8gcGFyYW1bMF0gOiBwYXJhbSB8fCBkZWZhdWx0VmFsdWUpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hpbGRNYXBJZHNGcm9tRGF0YSA9IChcbiAgZGF0YTogT250YXJpb0F2YWlsYWJpbGl0eVJlc3BvbnNlXG4pOiBudW1iZXJbXSA9PiB7XG4gIHJldHVybiBkYXRhLm1hcExpbmtBdmFpbGFiaWxpdGllc1xuICAgID8gT2JqZWN0LmtleXMoZGF0YS5tYXBMaW5rQXZhaWxhYmlsaXRpZXMpXG4gICAgICAgIC5maWx0ZXIoKGlkKSA9PlxuICAgICAgICAgIGRhdGEubWFwTGlua0F2YWlsYWJpbGl0aWVzW2lkXS5ldmVyeSgodmFsOiBudW1iZXIpID0+IHZhbCA9PT0gMClcbiAgICAgICAgKVxuICAgICAgICAubWFwKE51bWJlcilcbiAgICA6IFtdO1xufTtcbiJdLCJuYW1lcyI6WyJnZXRRdWVyeVBhcmFtQXNTdHJpbmciLCJwYXJhbSIsImRlZmF1bHRWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImdldENoaWxkTWFwSWRzRnJvbURhdGEiLCJkYXRhIiwibWFwTGlua0F2YWlsYWJpbGl0aWVzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImlkIiwiZXZlcnkiLCJ2YWwiLCJtYXAiLCJOdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/utils.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/ontario-parks/getAvailability.ts"));
module.exports = __webpack_exports__;

})();