"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ontario-parks/availability/getAvailability";
exports.ids = ["pages/api/ontario-parks/availability/getAvailability"];
exports.modules = {

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/availability/getAvailability.ts":
/*!*********************************************************************!*\
  !*** ./src/pages/api/ontario-parks/availability/getAvailability.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _legend_mapLegend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../legend/mapLegend */ \"(api)/./src/pages/api/ontario-parks/legend/mapLegend.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(api)/./src/pages/api/ontario-parks/availability/utils.ts\");\n\n\n\n// in-memory cache\nlet cacheData = {};\nlet cacheTimestamp = {};\n// we have a cache time of 2 minute\nconst CACHE_DURATION = 1000 * 60 * 2;\n// we generate a seed everytime or else the request would fail\nfunction generateSeed() {\n    return new Date().toISOString();\n}\n// we generate a unique cache key based on query parameters\nfunction generateCacheKey(url, queryParams) {\n    const queryString = Object.keys(queryParams).map((key)=>`${key}=${queryParams[key]}`).join(\"&\");\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(`${url}?${queryString}`).digest(\"hex\");\n}\nasync function FetchAvailability(queryParams) {\n    const url = `https://reservations.ontarioparks.ca/api/availability/map`;\n    const cacheKey = generateCacheKey(url, queryParams);\n    // we check if the cache is still valid\n    const now = Date.now();\n    if (cacheData[cacheKey] && cacheTimestamp[cacheKey] && now - cacheTimestamp[cacheKey] < CACHE_DURATION) {\n        return cacheData[cacheKey];\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const queryString = new URLSearchParams(queryParams).toString();\n        const fullUrl = `${url}?${queryString}`;\n        const resp = await fetch(fullUrl);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch data, status: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch data: ${resp.status}`);\n        }\n        const data = await resp.json();\n        // update the cache\n        cacheData[cacheKey] = data;\n        cacheTimestamp[cacheKey] = now;\n        return data;\n    } catch (error) {\n        console.error(\"error fetching availability data:\", error);\n        throw new Error(\"Failed to fetch availability data\");\n    }\n}\nasync function FetchAllParksAvailability(queryParams) {\n    const allParksData = await FetchAvailability(queryParams);\n    // ensure that mapLinkAvailabilities exists\n    const childMapIds = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getChildMapIdsFromData)(allParksData);\n    const grandchildData = await Promise.all(childMapIds.map(async (childMapId)=>{\n        const childAvailability = await FetchAvailability({\n            ...queryParams,\n            mapId: childMapId\n        });\n        return childAvailability;\n    }));\n    const grandchildMapIds = grandchildData.flatMap((data)=>(0,_utils__WEBPACK_IMPORTED_MODULE_2__.getChildMapIdsFromData)(data)).filter((id, index, self)=>self.indexOf(id) === index);\n    const grandchildAvailabilityData = await Promise.all(grandchildMapIds.map(async (grandchildMapId)=>{\n        const legendDetails = await (0,_legend_mapLegend__WEBPACK_IMPORTED_MODULE_1__.getMapLegendDetails)(grandchildMapId);\n        return {\n            mapId: grandchildMapId,\n            legendDetails\n        };\n    }));\n    return grandchildAvailabilityData;\n}\nasync function handler(req, res) {\n    const { mapId , bookingCategoryId , equipmentCategoryId , subEquipmentCategoryId , cartUid , cartTransactionUid , bookingUid , startDate , endDate , partySize  } = req.query;\n    const queryParams = {\n        mapId: mapId ? Number(mapId) : -2147483464,\n        bookingCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(bookingCategoryId, \"0\"),\n        equipmentCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(equipmentCategoryId, \"-32768\"),\n        subEquipmentCategoryId: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(subEquipmentCategoryId, \"-32768\"),\n        cartUid: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(cartUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        cartTransactionUid: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(cartTransactionUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        bookingUid: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(bookingUid, crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID()),\n        startDate: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(startDate, new Date().toISOString().split(\"T\")[0]),\n        endDate: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(endDate, new Date(new Date().setDate(new Date().getDate() + 1)).toISOString().split(\"T\")[0]),\n        getDailyAvailability: \"false\",\n        isReserving: \"true\",\n        filterData: `[]`,\n        boatLength: \"null\",\n        boatDraft: \"null\",\n        boatWidth: \"null\",\n        partySize: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryParamAsString)(partySize, \"2\"),\n        numEquipment: \"null\",\n        seed: generateSeed()\n    };\n    if (!mapId) {\n        // initial search for all parks\n        const data = await FetchAllParksAvailability(queryParams);\n        return res.status(200).json(data);\n    } else {\n        // search one level lower\n        const data1 = await FetchAvailability(queryParams);\n        const legendDetails = await (0,_legend_mapLegend__WEBPACK_IMPORTED_MODULE_1__.getMapLegendDetails)(Number(mapId));\n        return res.status(200).json({\n            mapId,\n            legendDetails\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/availability/getAvailability.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/availability/utils.ts":
/*!***********************************************************!*\
  !*** ./src/pages/api/ontario-parks/availability/utils.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChildMapIdsFromData\": () => (/* binding */ getChildMapIdsFromData),\n/* harmony export */   \"getQueryParamAsString\": () => (/* binding */ getQueryParamAsString)\n/* harmony export */ });\nconst getQueryParamAsString = (param, defaultValue)=>Array.isArray(param) ? param[0] : param || defaultValue;\nconst getChildMapIdsFromData = (data)=>{\n    return data.mapLinkAvailabilities ? Object.keys(data.mapLinkAvailabilities).filter((id)=>data.mapLinkAvailabilities[id].every((val)=>val === 0)).map(Number) : [];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvYXZhaWxhYmlsaXR5L3V0aWxzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRU8sTUFBTUEsd0JBQXdCLENBQ25DQyxPQUNBQyxlQUNZQyxNQUFNQyxPQUFPLENBQUNILFNBQVNBLEtBQUssQ0FBQyxFQUFFLEdBQUdBLFNBQVNDLFlBQVksQ0FBRTtBQUVoRSxNQUFNRyx5QkFBeUIsQ0FDcENDLE9BQ2E7SUFDYixPQUFPQSxLQUFLQyxxQkFBcUIsR0FDN0JDLE9BQU9DLElBQUksQ0FBQ0gsS0FBS0MscUJBQXFCLEVBQ25DRyxNQUFNLENBQUMsQ0FBQ0MsS0FDUEwsS0FBS0MscUJBQXFCLENBQUNJLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLE1BQWdCQSxRQUFRLElBRS9EQyxHQUFHLENBQUNDLFVBQ1AsRUFBRTtBQUNSLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW1wZmluZHIvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvYXZhaWxhYmlsaXR5L3V0aWxzLnRzP2E3YWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT250YXJpb0F2YWlsYWJpbGl0eVJlc3BvbnNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGdldFF1ZXJ5UGFyYW1Bc1N0cmluZyA9IChcbiAgcGFyYW06IHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkLFxuICBkZWZhdWx0VmFsdWU6IHN0cmluZ1xuKTogc3RyaW5nID0+IChBcnJheS5pc0FycmF5KHBhcmFtKSA/IHBhcmFtWzBdIDogcGFyYW0gfHwgZGVmYXVsdFZhbHVlKTtcblxuZXhwb3J0IGNvbnN0IGdldENoaWxkTWFwSWRzRnJvbURhdGEgPSAoXG4gIGRhdGE6IE9udGFyaW9BdmFpbGFiaWxpdHlSZXNwb25zZVxuKTogbnVtYmVyW10gPT4ge1xuICByZXR1cm4gZGF0YS5tYXBMaW5rQXZhaWxhYmlsaXRpZXNcbiAgICA/IE9iamVjdC5rZXlzKGRhdGEubWFwTGlua0F2YWlsYWJpbGl0aWVzKVxuICAgICAgICAuZmlsdGVyKChpZCkgPT5cbiAgICAgICAgICBkYXRhLm1hcExpbmtBdmFpbGFiaWxpdGllc1tpZF0uZXZlcnkoKHZhbDogbnVtYmVyKSA9PiB2YWwgPT09IDApXG4gICAgICAgIClcbiAgICAgICAgLm1hcChOdW1iZXIpXG4gICAgOiBbXTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0UXVlcnlQYXJhbUFzU3RyaW5nIiwicGFyYW0iLCJkZWZhdWx0VmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJnZXRDaGlsZE1hcElkc0Zyb21EYXRhIiwiZGF0YSIsIm1hcExpbmtBdmFpbGFiaWxpdGllcyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJpZCIsImV2ZXJ5IiwidmFsIiwibWFwIiwiTnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/availability/utils.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/legend/imageUrl.ts":
/*!********************************************************!*\
  !*** ./src/pages/api/ontario-parks/legend/imageUrl.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fetchImageUrl\": () => (/* binding */ fetchImageUrl),\n/* harmony export */   \"getImageURL\": () => (/* binding */ getImageURL)\n/* harmony export */ });\n// in-memory cache\nlet imageCache = null;\nlet imageCacheTimestamp = null;\n// we have a cache time of 7 days\nconst CACHE_DURATION = 1000 * 60 * 60 * 168;\nasync function fetchImageUrl(mapId) {\n    const now = Date.now();\n    if (!imageCache) {\n        imageCache = new Map();\n    }\n    // we check if the cache is still valid\n    if (imageCache.has(mapId) && imageCacheTimestamp && now - imageCacheTimestamp < CACHE_DURATION) {\n        return imageCache.get(mapId) || null;\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const url = `https://reservations.ontarioparks.ca/api/photo/resourcelocation?resourceLocationId=${mapId}`;\n        const resp = await fetch(url);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch image URL: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch image URL: ${resp.status}`);\n        }\n        const imageUrl = await resp.text();\n        // update the cache\n        imageCache.set(mapId, imageUrl);\n        imageCacheTimestamp = now;\n        return imageUrl;\n    } catch (error) {\n        console.error(\"Error fetching image URL:\", error);\n        throw new Error(\"Failed to fetch image URL\");\n    }\n}\nasync function getImageURL(mapId) {\n    const url = await fetchImageUrl(mapId);\n    return url;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvbGVnZW5kL2ltYWdlVXJsLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0JBQWtCO0FBQ2xCLElBQUlBLGFBQXlDLElBQUk7QUFDakQsSUFBSUMsc0JBQXFDLElBQUk7QUFFN0MsaUNBQWlDO0FBQ2pDLE1BQU1DLGlCQUFpQixPQUFPLEtBQUssS0FBSztBQUVqQyxlQUFlQyxjQUFjQyxLQUFhLEVBQTBCO0lBQ3pFLE1BQU1DLE1BQU1DLEtBQUtELEdBQUc7SUFFcEIsSUFBSSxDQUFDTCxZQUFZO1FBQ2ZBLGFBQWEsSUFBSU87SUFDbkIsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUNFUCxXQUFXUSxHQUFHLENBQUNKLFVBQ2ZILHVCQUNBSSxNQUFNSixzQkFBc0JDLGdCQUM1QjtRQUNBLE9BQU9GLFdBQVdTLEdBQUcsQ0FBQ0wsVUFBVSxJQUFJO0lBQ3RDLENBQUM7SUFFRCwyQ0FBMkM7SUFDM0MsSUFBSTtRQUNGLE1BQU1NLE1BQU0sQ0FBQyxtRkFBbUYsRUFBRU4sTUFBTSxDQUFDO1FBQ3pHLE1BQU1PLE9BQU8sTUFBTUMsTUFBTUY7UUFFekIsSUFBSSxDQUFDQyxLQUFLRSxFQUFFLEVBQUU7WUFDWixNQUFNQyxlQUFlLE1BQU1ILEtBQUtJLElBQUk7WUFDcENDLFFBQVFDLEtBQUssQ0FDWCxDQUFDLDJCQUEyQixFQUFFTixLQUFLTyxNQUFNLENBQUMsV0FBVyxFQUFFSixhQUFhLENBQUM7WUFFdkUsTUFBTSxJQUFJSyxNQUFNLENBQUMsMkJBQTJCLEVBQUVSLEtBQUtPLE1BQU0sQ0FBQyxDQUFDLEVBQUU7UUFDL0QsQ0FBQztRQUVELE1BQU1FLFdBQVcsTUFBTVQsS0FBS0ksSUFBSTtRQUVoQyxtQkFBbUI7UUFDbkJmLFdBQVdxQixHQUFHLENBQUNqQixPQUFPZ0I7UUFDdEJuQixzQkFBc0JJO1FBRXRCLE9BQU9lO0lBQ1QsRUFBRSxPQUFPSCxPQUFPO1FBQ2RELFFBQVFDLEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE1BQU0sSUFBSUUsTUFBTSw2QkFBNkI7SUFDL0M7QUFDRixDQUFDO0FBR00sZUFBZUcsWUFDcEJsQixLQUFhLEVBQ1c7SUFDdEIsTUFBTU0sTUFBTSxNQUFNUCxjQUFjQztJQUNoQyxPQUFPTTtBQUNYLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW1wZmluZHIvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvbGVnZW5kL2ltYWdlVXJsLnRzPzFhMzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW4tbWVtb3J5IGNhY2hlXG5sZXQgaW1hZ2VDYWNoZTogTWFwPG51bWJlciwgc3RyaW5nPiB8IG51bGwgPSBudWxsO1xubGV0IGltYWdlQ2FjaGVUaW1lc3RhbXA6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4vLyB3ZSBoYXZlIGEgY2FjaGUgdGltZSBvZiA3IGRheXNcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gMTAwMCAqIDYwICogNjAgKiAxNjg7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEltYWdlVXJsKG1hcElkOiBudW1iZXIpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICBpZiAoIWltYWdlQ2FjaGUpIHtcbiAgICBpbWFnZUNhY2hlID0gbmV3IE1hcDxudW1iZXIsIHN0cmluZz4oKTtcbiAgfVxuXG4gIC8vIHdlIGNoZWNrIGlmIHRoZSBjYWNoZSBpcyBzdGlsbCB2YWxpZFxuICBpZiAoXG4gICAgaW1hZ2VDYWNoZS5oYXMobWFwSWQpICYmXG4gICAgaW1hZ2VDYWNoZVRpbWVzdGFtcCAmJlxuICAgIG5vdyAtIGltYWdlQ2FjaGVUaW1lc3RhbXAgPCBDQUNIRV9EVVJBVElPTlxuICApIHtcbiAgICByZXR1cm4gaW1hZ2VDYWNoZS5nZXQobWFwSWQpIHx8IG51bGw7XG4gIH1cblxuICAvLyBpZiBjYWNoZSBpcyBub3QgdmFsaWQsIHdlIGZldGNoIG5ldyBkYXRhXG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vcmVzZXJ2YXRpb25zLm9udGFyaW9wYXJrcy5jYS9hcGkvcGhvdG8vcmVzb3VyY2Vsb2NhdGlvbj9yZXNvdXJjZUxvY2F0aW9uSWQ9JHttYXBJZH1gO1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaCh1cmwpO1xuXG4gICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRldGFpbHMgPSBhd2FpdCByZXNwLnRleHQoKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZmV0Y2ggaW1hZ2UgVVJMOiAke3Jlc3Auc3RhdHVzfSwgZGV0YWlsczogJHtlcnJvckRldGFpbHN9YFxuICAgICAgKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGltYWdlIFVSTDogJHtyZXNwLnN0YXR1c31gKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZVVybCA9IGF3YWl0IHJlc3AudGV4dCgpO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBjYWNoZVxuICAgIGltYWdlQ2FjaGUuc2V0KG1hcElkLCBpbWFnZVVybCk7XG4gICAgaW1hZ2VDYWNoZVRpbWVzdGFtcCA9IG5vdztcblxuICAgIHJldHVybiBpbWFnZVVybDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgaW1hZ2UgVVJMOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGltYWdlIFVSTFwiKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJbWFnZVVSTChcbiAgbWFwSWQ6IG51bWJlclxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgZmV0Y2hJbWFnZVVybChtYXBJZCk7XG4gICAgcmV0dXJuIHVybFxufVxuIl0sIm5hbWVzIjpbImltYWdlQ2FjaGUiLCJpbWFnZUNhY2hlVGltZXN0YW1wIiwiQ0FDSEVfRFVSQVRJT04iLCJmZXRjaEltYWdlVXJsIiwibWFwSWQiLCJub3ciLCJEYXRlIiwiTWFwIiwiaGFzIiwiZ2V0IiwidXJsIiwicmVzcCIsImZldGNoIiwib2siLCJlcnJvckRldGFpbHMiLCJ0ZXh0IiwiY29uc29sZSIsImVycm9yIiwic3RhdHVzIiwiRXJyb3IiLCJpbWFnZVVybCIsInNldCIsImdldEltYWdlVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/legend/imageUrl.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/ontario-parks/legend/mapLegend.ts":
/*!*********************************************************!*\
  !*** ./src/pages/api/ontario-parks/legend/mapLegend.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getMapLegendDetails\": () => (/* binding */ getMapLegendDetails)\n/* harmony export */ });\n/* harmony import */ var _imageUrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageUrl */ \"(api)/./src/pages/api/ontario-parks/legend/imageUrl.ts\");\n\n// in-memory cache\nlet legendCache = null;\nlet cacheTimestamp = null;\n// we have a cache time of 7 days\nconst CACHE_DURATION = 1000 * 60 * 60 * 168;\nasync function fetchMapLegend() {\n    const now = Date.now();\n    // we check if the cache is still valid\n    if (legendCache && cacheTimestamp && now - cacheTimestamp < CACHE_DURATION) {\n        return legendCache;\n    }\n    // if cache is not valid, we fetch new data\n    try {\n        const url = `https://reservations.ontarioparks.ca/api/maps`;\n        const resp = await fetch(url);\n        if (!resp.ok) {\n            const errorDetails = await resp.text();\n            console.error(`Failed to fetch data: ${resp.status}, details: ${errorDetails}`);\n            throw new Error(`Failed to fetch data: ${resp.status}`);\n        }\n        const data = await resp.json();\n        // make the response a map with key being the mapId and values being things we use\n        const legendMap = new Map();\n        data.forEach((entry)=>{\n            const localizedEntry = entry.localizedValues.find((val)=>val.cultureName === \"en-CA\");\n            legendMap.set(entry.mapId, {\n                resourceLocationId: entry.resourceLocationId,\n                title: localizedEntry?.title,\n                description: localizedEntry?.description\n            });\n        });\n        // update the cache\n        legendCache = legendMap;\n        cacheTimestamp = now;\n        return legendMap;\n    } catch (error) {\n        console.error(\"Error fetching map legend data:\", error);\n        throw new Error(\"Failed to fetch map legend data\");\n    }\n}\nasync function getMapLegendDetails(mapId) {\n    try {\n        const legendMap = await fetchMapLegend();\n        const legendDetails = legendMap.get(mapId);\n        if (legendDetails) {\n            const imageUrl = await (0,_imageUrl__WEBPACK_IMPORTED_MODULE_0__.getImageURL)(legendDetails.resourceLocationId);\n            return {\n                resourceLocationId: legendDetails.resourceLocationId,\n                title: legendDetails.title,\n                description: legendDetails.description,\n                imageUrl: imageUrl\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error fetching map legend details:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL29udGFyaW8tcGFya3MvbGVnZW5kL21hcExlZ2VuZC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUN5QztBQUd6QyxrQkFBa0I7QUFDbEIsSUFBSUMsY0FBaUQsSUFBSTtBQUN6RCxJQUFJQyxpQkFBZ0MsSUFBSTtBQUV4QyxpQ0FBaUM7QUFDakMsTUFBTUMsaUJBQWlCLE9BQU8sS0FBSyxLQUFLO0FBRXhDLGVBQWVDLGlCQUFzRDtJQUNuRSxNQUFNQyxNQUFNQyxLQUFLRCxHQUFHO0lBRXBCLHVDQUF1QztJQUN2QyxJQUFJSixlQUFlQyxrQkFBa0JHLE1BQU1ILGlCQUFpQkMsZ0JBQWdCO1FBQzFFLE9BQU9GO0lBQ1QsQ0FBQztJQUVELDJDQUEyQztJQUMzQyxJQUFJO1FBQ0YsTUFBTU0sTUFBTSxDQUFDLDZDQUE2QyxDQUFDO1FBQzNELE1BQU1DLE9BQU8sTUFBTUMsTUFBTUY7UUFFekIsSUFBSSxDQUFDQyxLQUFLRSxFQUFFLEVBQUU7WUFDWixNQUFNQyxlQUFlLE1BQU1ILEtBQUtJLElBQUk7WUFDcENDLFFBQVFDLEtBQUssQ0FDWCxDQUFDLHNCQUFzQixFQUFFTixLQUFLTyxNQUFNLENBQUMsV0FBVyxFQUFFSixhQUFhLENBQUM7WUFFbEUsTUFBTSxJQUFJSyxNQUFNLENBQUMsc0JBQXNCLEVBQUVSLEtBQUtPLE1BQU0sQ0FBQyxDQUFDLEVBQUU7UUFDMUQsQ0FBQztRQUVELE1BQU1FLE9BQTBCLE1BQU1ULEtBQUtVLElBQUk7UUFFL0Msa0ZBQWtGO1FBQ2xGLE1BQU1DLFlBQVksSUFBSUM7UUFDdEJILEtBQUtJLE9BQU8sQ0FBQyxDQUFDQyxRQUFVO1lBQ3RCLE1BQU1DLGlCQUFpQkQsTUFBTUUsZUFBZSxDQUFDQyxJQUFJLENBQy9DLENBQUNDLE1BQVFBLElBQUlDLFdBQVcsS0FBSztZQUcvQlIsVUFBVVMsR0FBRyxDQUFDTixNQUFNTyxLQUFLLEVBQUU7Z0JBQ3pCQyxvQkFBb0JSLE1BQU1RLGtCQUFrQjtnQkFDNUNDLE9BQU9SLGdCQUFnQlE7Z0JBQ3ZCQyxhQUFhVCxnQkFBZ0JTO1lBQy9CO1FBQ0Y7UUFFQSxtQkFBbUI7UUFDbkIvQixjQUFja0I7UUFDZGpCLGlCQUFpQkc7UUFFakIsT0FBT2M7SUFDVCxFQUFFLE9BQU9MLE9BQU87UUFDZEQsUUFBUUMsS0FBSyxDQUFDLG1DQUFtQ0E7UUFDakQsTUFBTSxJQUFJRSxNQUFNLG1DQUFtQztJQUNyRDtBQUNGO0FBRU8sZUFBZWlCLG9CQUNwQkosS0FBYSxFQUNrQjtJQUMvQixJQUFJO1FBQ0YsTUFBTVYsWUFBWSxNQUFNZjtRQUN4QixNQUFNOEIsZ0JBQWdCZixVQUFVZ0IsR0FBRyxDQUFDTjtRQUVwQyxJQUFJSyxlQUFlO1lBQ2pCLE1BQU1FLFdBQVcsTUFBTXBDLHNEQUFXQSxDQUFDa0MsY0FBY0osa0JBQWtCO1lBRW5FLE9BQU87Z0JBQ0xBLG9CQUFvQkksY0FBY0osa0JBQWtCO2dCQUNwREMsT0FBT0csY0FBY0gsS0FBSztnQkFDMUJDLGFBQWFFLGNBQWNGLFdBQVc7Z0JBQ3RDSSxVQUFVQTtZQUNaO1FBQ0YsQ0FBQztRQUVELE9BQU8sSUFBSTtJQUNiLEVBQUUsT0FBT3RCLE9BQU87UUFDZEQsUUFBUUMsS0FBSyxDQUFDLHNDQUFzQ0E7UUFDcEQsT0FBTyxJQUFJO0lBQ2I7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FtcGZpbmRyLy4vc3JjL3BhZ2VzL2FwaS9vbnRhcmlvLXBhcmtzL2xlZ2VuZC9tYXBMZWdlbmQudHM/NDhlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMZWdlbmREZXRhaWxzIH0gZnJvbSBcIkBwYWNrYWdlcy90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0SW1hZ2VVUkwgfSBmcm9tIFwiLi9pbWFnZVVybFwiO1xuaW1wb3J0IHsgTWFwTGVnZW5kRW50cnksIE1hcExlZ2VuZFJlc3BvbnNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLy8gaW4tbWVtb3J5IGNhY2hlXG5sZXQgbGVnZW5kQ2FjaGU6IE1hcDxudW1iZXIsIExlZ2VuZERldGFpbHM+IHwgbnVsbCA9IG51bGw7XG5sZXQgY2FjaGVUaW1lc3RhbXA6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4vLyB3ZSBoYXZlIGEgY2FjaGUgdGltZSBvZiA3IGRheXNcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gMTAwMCAqIDYwICogNjAgKiAxNjg7XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoTWFwTGVnZW5kKCk6IFByb21pc2U8TWFwPG51bWJlciwgTGVnZW5kRGV0YWlscz4+IHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAvLyB3ZSBjaGVjayBpZiB0aGUgY2FjaGUgaXMgc3RpbGwgdmFsaWRcbiAgaWYgKGxlZ2VuZENhY2hlICYmIGNhY2hlVGltZXN0YW1wICYmIG5vdyAtIGNhY2hlVGltZXN0YW1wIDwgQ0FDSEVfRFVSQVRJT04pIHtcbiAgICByZXR1cm4gbGVnZW5kQ2FjaGU7XG4gIH1cblxuICAvLyBpZiBjYWNoZSBpcyBub3QgdmFsaWQsIHdlIGZldGNoIG5ldyBkYXRhXG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vcmVzZXJ2YXRpb25zLm9udGFyaW9wYXJrcy5jYS9hcGkvbWFwc2A7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgICBpZiAoIXJlc3Aub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGF3YWl0IHJlc3AudGV4dCgpO1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBmZXRjaCBkYXRhOiAke3Jlc3Auc3RhdHVzfSwgZGV0YWlsczogJHtlcnJvckRldGFpbHN9YFxuICAgICAgKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGRhdGE6ICR7cmVzcC5zdGF0dXN9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YTogTWFwTGVnZW5kUmVzcG9uc2UgPSBhd2FpdCByZXNwLmpzb24oKTtcblxuICAgIC8vIG1ha2UgdGhlIHJlc3BvbnNlIGEgbWFwIHdpdGgga2V5IGJlaW5nIHRoZSBtYXBJZCBhbmQgdmFsdWVzIGJlaW5nIHRoaW5ncyB3ZSB1c2VcbiAgICBjb25zdCBsZWdlbmRNYXAgPSBuZXcgTWFwPG51bWJlciwgTGVnZW5kRGV0YWlscz4oKTtcbiAgICBkYXRhLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBsb2NhbGl6ZWRFbnRyeSA9IGVudHJ5LmxvY2FsaXplZFZhbHVlcy5maW5kKFxuICAgICAgICAodmFsKSA9PiB2YWwuY3VsdHVyZU5hbWUgPT09IFwiZW4tQ0FcIlxuICAgICAgKTtcblxuICAgICAgbGVnZW5kTWFwLnNldChlbnRyeS5tYXBJZCwge1xuICAgICAgICByZXNvdXJjZUxvY2F0aW9uSWQ6IGVudHJ5LnJlc291cmNlTG9jYXRpb25JZCxcbiAgICAgICAgdGl0bGU6IGxvY2FsaXplZEVudHJ5Py50aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGxvY2FsaXplZEVudHJ5Py5kZXNjcmlwdGlvbixcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBjYWNoZVxuICAgIGxlZ2VuZENhY2hlID0gbGVnZW5kTWFwO1xuICAgIGNhY2hlVGltZXN0YW1wID0gbm93O1xuXG4gICAgcmV0dXJuIGxlZ2VuZE1hcDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbWFwIGxlZ2VuZCBkYXRhOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIG1hcCBsZWdlbmQgZGF0YVwiKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFwTGVnZW5kRGV0YWlscyhcbiAgbWFwSWQ6IG51bWJlclxuKTogUHJvbWlzZTxMZWdlbmREZXRhaWxzIHwgbnVsbD4ge1xuICB0cnkge1xuICAgIGNvbnN0IGxlZ2VuZE1hcCA9IGF3YWl0IGZldGNoTWFwTGVnZW5kKCk7XG4gICAgY29uc3QgbGVnZW5kRGV0YWlscyA9IGxlZ2VuZE1hcC5nZXQobWFwSWQpO1xuXG4gICAgaWYgKGxlZ2VuZERldGFpbHMpIHtcbiAgICAgIGNvbnN0IGltYWdlVXJsID0gYXdhaXQgZ2V0SW1hZ2VVUkwobGVnZW5kRGV0YWlscy5yZXNvdXJjZUxvY2F0aW9uSWQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNvdXJjZUxvY2F0aW9uSWQ6IGxlZ2VuZERldGFpbHMucmVzb3VyY2VMb2NhdGlvbklkLFxuICAgICAgICB0aXRsZTogbGVnZW5kRGV0YWlscy50aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGxlZ2VuZERldGFpbHMuZGVzY3JpcHRpb24sXG4gICAgICAgIGltYWdlVXJsOiBpbWFnZVVybCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG1hcCBsZWdlbmQgZGV0YWlsczpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZ2V0SW1hZ2VVUkwiLCJsZWdlbmRDYWNoZSIsImNhY2hlVGltZXN0YW1wIiwiQ0FDSEVfRFVSQVRJT04iLCJmZXRjaE1hcExlZ2VuZCIsIm5vdyIsIkRhdGUiLCJ1cmwiLCJyZXNwIiwiZmV0Y2giLCJvayIsImVycm9yRGV0YWlscyIsInRleHQiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXMiLCJFcnJvciIsImRhdGEiLCJqc29uIiwibGVnZW5kTWFwIiwiTWFwIiwiZm9yRWFjaCIsImVudHJ5IiwibG9jYWxpemVkRW50cnkiLCJsb2NhbGl6ZWRWYWx1ZXMiLCJmaW5kIiwidmFsIiwiY3VsdHVyZU5hbWUiLCJzZXQiLCJtYXBJZCIsInJlc291cmNlTG9jYXRpb25JZCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJnZXRNYXBMZWdlbmREZXRhaWxzIiwibGVnZW5kRGV0YWlscyIsImdldCIsImltYWdlVXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/ontario-parks/legend/mapLegend.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/ontario-parks/availability/getAvailability.ts"));
module.exports = __webpack_exports__;

})();